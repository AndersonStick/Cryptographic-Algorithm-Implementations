# -*- coding: utf-8 -*-
"""Taller Playfair.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P0O1QKFuQK72ZMuleGuESPHH-nYJ9-o_

# **Taller Playfair HOMEWORK**
## Anderson Stick Barrera Tovar
### 1000623506

Implementar el algoritmo de cifrado de bloques Playfair Cipher en Python. Utilizar un parámetro para identificar si es para cifrar o descifrar, por ejemplo, 1 o 0.

El algoritmo debe recibir como entrada para cifrar:
- El mensaje en texto claro
- La clave

Para decifrar:
- Mensaje cifrado
- La clave

Cargar en esta tarea un archivo ZIP con lo siguiente:
- Archivo Python
- Pequeño video o screenshot (pantallazo) en donde se muestre funcionar el algoritmo
"""

def generate_playfair_matrix(key):
    key = key.replace(" ", "").upper()
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    key_matrix = []
    for char in key:
        if char not in key_matrix and char in alphabet:
            key_matrix.append(char)
    for char in alphabet:
        if char not in key_matrix:
            key_matrix.append(char)
    playfair_matrix = [key_matrix[i:i+5] for i in range(0, 25, 5)]
    return playfair_matrix

def find_char_position(matrix, char):
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == char:
                return i, j

"""### Función para cifrar un mensaje:"""

def encrypt_playfair(plaintext, key):
    plaintext = plaintext.replace(" ", "").upper()
    playfair_matrix = generate_playfair_matrix(key)
    ciphertext = ""
    for i in range(0, len(plaintext), 2):
        char1, char2 = plaintext[i], plaintext[i+1]
        row1, col1 = find_char_position(playfair_matrix, char1)
        row2, col2 = find_char_position(playfair_matrix, char2)
        if row1 == row2:
            ciphertext += playfair_matrix[row1][(col1+1)%5] + playfair_matrix[row2][(col2+1)%5]
        elif col1 == col2:
            ciphertext += playfair_matrix[(row1+1)%5][col1] + playfair_matrix[(row2+1)%5][col2]
        else:
            ciphertext += playfair_matrix[row1][col2] + playfair_matrix[row2][col1]
    return ciphertext

"""### Función para descifrar un mensaje:"""

def decrypt_playfair(ciphertext, key):
    ciphertext = ciphertext.replace(" ", "").upper()
    playfair_matrix = generate_playfair_matrix(key)
    plaintext = ""
    for i in range(0, len(ciphertext), 2):
        char1, char2 = ciphertext[i], ciphertext[i+1]
        row1, col1 = find_char_position(playfair_matrix, char1)
        row2, col2 = find_char_position(playfair_matrix, char2)
        if row1 == row2:
            plaintext += playfair_matrix[row1][(col1-1)%5] + playfair_matrix[row2][(col2-1)%5]
        elif col1 == col2:
            plaintext += playfair_matrix[(row1-1)%5][col1] + playfair_matrix[(row2-1)%5][col2]
        else:
            plaintext += playfair_matrix[row1][col2] + playfair_matrix[row2][col1]
    return plaintext

"""## Ejemplo de uso (Encriptación):

MESSAGE: TH IS SE CR ET ME SX SA GE IS EN CR YP TE DX

KEY: Y O A N P IJ Z B C D E F G H K L M Q R S
"""

def split_into_pairs_with_space(text):
    """
    Divide el texto en pares de letras con un espacio entre cada par.
    """
    pairs = [text[i:i+2] for i in range(0, len(text), 2)]
    return ' '.join(pairs)

def main():
    choice = int(input("Enter 1 for encryption, 0 for decryption: "))
    if choice == 1:
        plaintext = input("Enter plaintext: ")
        key = input("Enter key: ")
        ciphertext = encrypt_playfair(plaintext, key)
        print("Ciphertext:", ciphertext)
        separated_text = split_into_pairs_with_space(ciphertext)
        print(separated_text)
    elif choice == 0:
        ciphertext = input("Enter ciphertext: ")
        key = input("Enter key: ")
        plaintext = decrypt_playfair(ciphertext, key)
        print("Plaintext:", plaintext)
        separated_text = split_into_pairs_with_space(plaintext)
        print(separated_text)
    else:
        print("Invalid choice.")

if __name__ == "__main__":
    main()

"""## Ejemplo de uso (Desencriptación):

MESSAGE: ZO MH LC HY ZK MN SO NQ DL KT OQ CY KI EC LK SO YI EQ PQ RX EY KR WM NS KL GY LD GF AB YA QN YE AP GN IX PG HY YS NB HT EC TL KF VN RP YT PU PF CY EB YA WM KI MP LF UZ LH TC YH NP CK KL LY YT KI GB DH CY EC RD GN CL GO IH YE TY KI XO UY VN SC LX KF MX PW

KEY: Y O A N P IJ Z B C D E F G H K L M Q R S
"""

def split_into_pairs_with_space(text):
    """
    Divide el texto en pares de letras con un espacio entre cada par.
    """
    pairs = [text[i:i+2] for i in range(0, len(text), 2)]
    return ' '.join(pairs)

def main():
    choice = int(input("Enter 1 for encryption, 0 for decryption: "))
    if choice == 1:
        plaintext = input("Enter plaintext: ")
        key = input("Enter key: ")
        ciphertext = encrypt_playfair(plaintext, key)
        print("Ciphertext:", ciphertext)
        separated_text = split_into_pairs_with_space(ciphertext)
        print(separated_text)
    elif choice == 0:
        ciphertext = input("Enter ciphertext: ")
        key = input("Enter key: ")
        plaintext = decrypt_playfair(ciphertext, key)
        print("Plaintext:", plaintext)
        separated_text = split_into_pairs_with_space(plaintext)
    else:
        print("Invalid choice.")

if __name__ == "__main__":
    main()

"""MENSAJE DECIFRADO Y SEPARADO:
OUR FRIEND FROM PARIS EXAMINED HIS EMPTY GLASS WITH SURPRISE AS IF EVAPORATION HAD TAKEN PLACE WHILE HE WASN'T LOOKING. I POURED SOME MORE WINE AND HE SETTLED BACK IN HIS CHAIR, FACE TILTED UP TOWARDS THE SUN
"""