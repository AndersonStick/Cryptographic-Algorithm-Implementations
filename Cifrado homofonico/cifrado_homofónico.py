# -*- coding: utf-8 -*-
"""Cifrado Homofónico.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cktruunOhWqc8vA1lg9SctW5MAdK-2Se

# **Taller Homophonic Cipher HOMEWORK**
## Anderson Stick Barrera Tovar
### 1000623506

Implementar el algoritmo de cifrado Homofónico en Python (o en el lenguaje de su elección) utilizando para m=100 y n=26. El layout a utilizar será el mismo visto en clase (consulte los slides de la parte 2) o un layout aleatorio en el que no se repitan los números al asignarlos a las letras (tenga en cuenta que si lo hace aleatorio debe ser el mismo layout para cifrar y decifrar).

El algoritmo debe recibir como entrada para cifrar:

- El mensaje en texto claro

Para decifrar:

- Mensaje cifrado

Cargar en esta tarea un archivo ZIP con lo siguiente:

- Archivo Python
- Pequeño video o screenshot en donde se muestre funcionar el algoritmo
"""

import random

# Definir el layout
layout = {
    'A': [9, 12, 33, 47, 53, 67, 78, 92],
    'B': [48, 81],
    'C': [13, 41, 62],
    'D': [1, 3, 45, 79],
    'E': [14, 16, 24, 44, 46, 55, 57, 64, 74, 82, 87, 98],
    'F': [10, 31],
    'G': [6, 25],
    'H': [23, 39, 50, 56, 65, 68],
    'I': [32, 70, 73, 83, 88, 93],
    'J': [15],
    'K': [4],
    'L': [26, 37, 51, 84],
    'M': [22, 27],
    'N': [18, 58, 59, 66, 71, 91],
    'O': [0, 5, 7, 54, 72, 90, 99],
    'P': [38, 95],
    'Q': [94],
    'R': [29, 35, 40, 42, 77, 80],
    'S': [11, 19, 36, 76, 86, 96],
    'T': [17, 20, 30, 43, 49, 69, 75, 85, 97],
    'U': [8, 61, 63],
    'V': [34],
    'W': [60, 89],
    'X': [28],
    'Y': [21, 52],
    'Z': [2]
}

def homophonic_encrypt(message):
    encrypted_message = ''
    for char in message.upper():
        if char in layout:
            encrypted_message += str(random.choice(layout[char])) + ' '
        else:
            encrypted_message += char
    return encrypted_message.strip()

def homophonic_decrypt(encrypted_message):
    decrypted_message = ''
    tokens = encrypted_message.split()
    for token in tokens:
        found = False
        for char, values in layout.items():
            if int(token) in values:
                decrypted_message += char
                found = True
                break
        if not found:
            decrypted_message += token
    return decrypted_message

# Ejemplo de uso
message = "Crypto is fun"
encrypted_message = homophonic_encrypt(message)
print("Mensaje cifrado:", encrypted_message)

# Mensaje encriptado
encrypted_message = "13 5 26 0 22 81 88 47"
# Descifrar el mensaje
decrypted_message = homophonic_decrypt(encrypted_message)
print("Mensaje descifrado:", decrypted_message)